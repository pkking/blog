<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>WAAAGH!</title><link href="http://pkking.github.com/" rel="alternate"></link><link href="http://pkking.github.com/feeds/za-xiang.atom.xml" rel="self"></link><id>http://pkking.github.com/</id><updated>2015-02-18T19:30:00+08:00</updated><entry><title>利用pelican和gitcafe搭建博客</title><link href="http://pkking.github.com/posts/2015/Feb/18/li-yong-pelicanhe-gitcafeda-jian-bo-ke/" rel="alternate"></link><published>2015-02-18T19:30:00+08:00</published><author><name>lichaoran</name></author><id>tag:pkking.github.com,2015-02-18:posts/2015/Feb/18/li-yong-pelicanhe-gitcafeda-jian-bo-ke/</id><summary type="html">&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;pelican是基于python的静态web站点生成器，由python编写
目前最火热的静态站点利器jekyll则由ruby编写，出于对python的爱，我于是选择用pelican&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档详见&lt;a href="http://docs.getpelican.com/"&gt;pelican&lt;/a&gt;，本文基于pelican 3.5.0版本&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;特性：&lt;ul&gt;
&lt;li&gt;支持markdown，html和rst&lt;/li&gt;
&lt;li&gt;支持各种主题&lt;a href="https://github.com/getpelican/pelican-themes"&gt;theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持插件&lt;/li&gt;
&lt;li&gt;代码高亮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gitcafe pages&lt;/h2&gt;
&lt;p&gt;gitcafe pages是类似于github pages的服务，不过国内访问速度更良心&lt;/p&gt;
&lt;h3&gt;WHY gitcafe&lt;/h3&gt;
&lt;p&gt;github大法好，不过国内的访问速度令人蛋碎，当然，如果是海外党，可能恰好相反，不过如果有米，当然最好能够买一个域名，然后通过CNAME将国外和国内IP分别引导到github pages和gitcafe pages，具体做法可以参见&lt;a href="https://ruby-china.org/topics/18084"&gt;该文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;QuickStart&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在centos 7下，首先安装python，pip，virtualenv（可选,virtualenv可以将各种库，插件和主题打包到一起，比较方便）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y python python-devel python-libs python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随后安装pelican和markdown库，如果需要建立虚拟环境(virtualenv)，则可以参见&lt;a href="https://virtualenv.pypa.io/en/latest"&gt;该文&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立一个存放博客的目录，并进入目录，取名'waaagh'（绿皮万岁)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p waaagh
cd waaagh
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QuickStart，运行：
&lt;code&gt;pelican-quickstart&lt;/code&gt;，根据提示，可以快速生成一个静态页面的生产环境，例如:（输入不支持backspace键，不过输入错误可以在随后生成的&lt;code&gt;pelicanconf.py&lt;/code&gt;文件中修改，直接按回车则是取默认值）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;blog&lt;span class="o"&gt;)[&lt;/span&gt;root@localhost waaagh&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# pelican-quickstart &lt;/span&gt;
Welcome to pelican-quickstart v3.5.0.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; .
&amp;gt; What will be the title of this web site? waaagh!!!
&amp;gt; Who will be the author of this web site? lichaoran
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; zh
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; yes
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; yes
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; pkking
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
  How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
▽ Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is the hostname of your SSH server? &lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What is the port of your SSH server? &lt;span class="o"&gt;[&lt;/span&gt;22&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What is your username on that server? &lt;span class="o"&gt;[&lt;/span&gt;root&lt;span class="o"&gt;]&lt;/span&gt; pkking
&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to put your web site on that server? &lt;span class="o"&gt;[&lt;/span&gt;/var/www&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
  Done. Your new project is available at /root/blog/blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成后，目录结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; yourproject/
├── content
│   └── (pages)
├── output
├── develop_server.sh
├── fabfile.py
├── Makefile
├── pelicanconf.py       # Main settings file
└── publishconf.py       # Settings to use when ready to publish
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;push一篇博文&lt;/h2&gt;
&lt;p&gt;通常，我们将content目录作为存放文章源文件的目录，pelican支持rst，markdown和html文件。
不管3721，先撸一篇markdown文章吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Title: 我的第一发博客
    Date: 2015-01-01 
    Category: Python
    Tags: pelican, publishing
    Slug: 第一篇博客
    Authors: lichaoran
    Summary: Hello World

    hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来，解释一下上面的文件内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以:隔开的key-value键值对可以成为元素局（metadata），他们构成了一些文章的基础属性，例如日期，标题，摘要等，具体的元数据可以参看pelican文档&lt;/li&gt;
&lt;li&gt;正文和metadata以空行隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写好文章后，将其命名为hello_world.md（.md为markdown源文件的后缀名），然后在project根目录运行&lt;code&gt;pelican /path/to/your/content/ [-s path/to/your/settings.py]&lt;/code&gt;，其中，&lt;code&gt;/path/to/your/content&lt;/code&gt;即是存放文章源文件的目录，刚才我们使用了content目录，该目录的名称可以在&lt;code&gt;pelicanconf.py&lt;/code&gt;中配置，甚至，输出目录&lt;code&gt;output&lt;/code&gt;都可以用其他配置文件代替，配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;也可以是其他的配置文件，只需要指定&lt;code&gt;path/to/your/settings.py&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIPS&lt;/strong&gt;:
写好文章后，利用刚才的命令，就已经生成好页面到&lt;code&gt;output&lt;/code&gt;目录了，这时可以利用&lt;code&gt;make serve&lt;/code&gt;命令启动一个本地服务器，通过访问&lt;code&gt;localhost.com:8000&lt;/code&gt;来访问生成的页面&lt;/p&gt;
&lt;h2&gt;主题&lt;/h2&gt;
&lt;p&gt;pelican支持各种主题，&lt;a href="http://pelicanthemes.com/"&gt;这里&lt;/a&gt;有各种主题及其下载链接，主题的安装和配置可以使用&lt;code&gt;pelican-theme&lt;/code&gt;工具，具体方法参见&lt;code&gt;pelican-theme --help&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;配置pelican&lt;/h2&gt;
&lt;p&gt;配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;包括了众多选项，可以参见&lt;a href="http://docs.getpelican.com/en/3.5.0/settings.html"&gt;该页&lt;/a&gt;进行配置&lt;/p&gt;
&lt;h2&gt;git端的配置&lt;/h2&gt;
&lt;p&gt;在生成好第一篇文章后，可以进入到&lt;code&gt;output&lt;/code&gt;目录，这里的内容就是即将托管到&lt;code&gt;gitcafe pages&lt;/code&gt;的静态页面，首先，到gitcafe.com建立一个user pages或者project pages，方法参见&lt;a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki"&gt;官方帮助文档&lt;/a&gt;，简化下来的步骤就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在gitcafe.com中建立一个和用户名相同的repo&lt;/li&gt;
&lt;li&gt;根据刚建立的空repo首页，将git username和email配置为相应的数据（在github中，非验证邮箱和用户名会导致pages build failure，不知道gitcafe是否有一样的机制）&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;output&lt;/code&gt;目录，依次运行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    git init &lt;span class="c1"&gt;#初始化仓库&lt;/span&gt;
    git checkout -b gitcafe-pages &lt;span class="c1"&gt;#建立制定分支，pages只会渲染该分支中的页面&lt;/span&gt;
    git add -A &lt;span class="c1"&gt;#添加修改&lt;/span&gt;
    git commit -m&lt;span class="s2"&gt;&amp;quot;init the blog&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#提交&lt;/span&gt;
    git remote add gitcafe git@gitcafe.com:pkking/pkking.git &lt;span class="c1"&gt;#pkking替换为你的gitcafe用户名&lt;/span&gt;
    git push gitcafe gitcafe-pages &lt;span class="c1"&gt;#将提交push到gitcafe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;OK，一切就绪，访问pkking.gitcafe.io查看渲染好的页面吧&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category><category term="pelican"></category><category term="gitcafe"></category><category term="博客"></category></entry></feed>